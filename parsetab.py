
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIEQUAL ID LITERAL LPAREN MINUS MULTI PLUS RPAREN SEMICOLONassignment : ID EQUAL expression SEMICOLONexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term MULTI factorterm : factorfactor : LPAREN expression RPARENfactor : MINUS factorfactor : PLUS factorfactor : LITERALfactor : ID'
    
_lr_action_items = {'ID':([0,3,6,8,10,13,14,16,],[2,4,4,4,4,4,4,4,]),'$end':([1,12,],[0,-1,]),'EQUAL':([2,],[3,]),'LPAREN':([3,6,8,10,13,14,16,],[10,10,10,10,10,10,10,]),'MINUS':([3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,],[8,-11,14,8,-4,8,-6,8,-10,8,8,-9,8,-8,14,-2,-3,-5,-7,]),'PLUS':([3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,],[6,-11,13,6,-4,6,-6,6,-10,6,6,-9,6,-8,13,-2,-3,-5,-7,]),'LITERAL':([3,6,8,10,13,14,16,],[11,11,11,11,11,11,11,]),'MULTI':([4,7,9,11,15,17,19,20,21,22,],[-11,16,-6,-10,-9,-8,16,16,-5,-7,]),'SEMICOLON':([4,5,7,9,11,15,17,19,20,21,22,],[-11,12,-4,-6,-10,-9,-8,-2,-3,-5,-7,]),'RPAREN':([4,7,9,11,15,17,18,19,20,21,22,],[-11,-4,-6,-10,-9,-8,22,-2,-3,-5,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignment':([0,],[1,]),'expression':([3,10,],[5,18,]),'term':([3,10,13,14,],[7,7,19,20,]),'factor':([3,6,8,10,13,14,16,],[9,15,17,9,9,9,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> assignment","S'",1,None,None,None),
  ('assignment -> ID EQUAL expression SEMICOLON','assignment',4,'p_assignment_expression','toy_syntactical_parser.py',19),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','toy_syntactical_parser.py',24),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','toy_syntactical_parser.py',29),
  ('expression -> term','expression',1,'p_expression_term','toy_syntactical_parser.py',34),
  ('term -> term MULTI factor','term',3,'p_term_multi','toy_syntactical_parser.py',39),
  ('term -> factor','term',1,'p_term_factor','toy_syntactical_parser.py',44),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_exp','toy_syntactical_parser.py',49),
  ('factor -> MINUS factor','factor',2,'p_factor_uminus','toy_syntactical_parser.py',54),
  ('factor -> PLUS factor','factor',2,'p_factor_plus','toy_syntactical_parser.py',59),
  ('factor -> LITERAL','factor',1,'p_factor_literal','toy_syntactical_parser.py',64),
  ('factor -> ID','factor',1,'p_factor_id','toy_syntactical_parser.py',69),
]
